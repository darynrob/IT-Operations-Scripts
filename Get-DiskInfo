
[CmdletBinding()]
param (

    [Parameter()]
    [string[]]
    $ComputerName = $env:COMPUTERNAME,

    [Parameter()]
    [switch]
    $IncludeNonResponding
)

# Scriptblock for Invoke-Command
$InvokeCommandScriptBlock = {

    $VerbosePreference = $Using:VerbosePreference
    
    Write-Verbose "Getting disk info on $env:COMPUTERNAME."
    
    $Result = [PSCustomObject]@{

        ComputerName = $env:COMPUTERNAME
        DiskNumber = $null
        FriendlyName = $null
        OperationalStatus = $null
        PartitionStyle = $null
    }

    $VerbosePreference = 'SilentlyContinue'

    Get-Disk | ForEach-Object {

        $Result.DiskNumber = $_.Number
        $Result.FriendlyName = $_.FriendlyName
        $Result.OperationalStatus = $_.OperationalStatus
        $Result.PartitionStyle = $_.PartitionStyle

        $Result
    }
} 

# Parameters for Invoke-Command
$InvokeCommandParams = @{

    ComputerName = $ComputerName
    ScriptBlock = $InvokeCommandScriptBlock
    ErrorAction = $ErrorActionPreference
}

switch ($IncludeNonResponding.IsPresent) {

    'True' {

        $InvokeCommandParams.Add('ErrorVariable','NonResponding')

        Invoke-Command @InvokeCommandParams | 
        Select-Object -Property *, ErrorId -ExcludeProperty PSComputerName, PSShowComputerName, RunspaceId

        if ($NonResponding) {

            foreach ($Computer in $NonResponding) {

                [PSCustomObject]@{

                    ComputerName = $Computer.TargetObject.ToUpper()
                    DiskNumber = $null
                    FriendlyName = $null
                    OperationalStatus = $null
                    PartitionStyle = $null
                    ErrorId = $Computer.FullyQualifiedErrorId
                }
            }
        }
    }
    'False' {

        Invoke-Command @InvokeCommandParams | 
        Select-Object -Property * -ExcludeProperty PSComputerName, PSShowComputerName, RunspaceId
    }
}
